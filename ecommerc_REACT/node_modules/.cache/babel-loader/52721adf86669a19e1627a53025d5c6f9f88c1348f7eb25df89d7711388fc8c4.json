{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport productSlice from \"./features/productSlice\";\nimport userSlice from \"./features/userSlice\";\nimport appApi from \"./services/appApi\";\nimport storage from \"redux-persist/lib/storage\";\nimport { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\n\n// Combine reducers\nconst reducer = combineReducers({\n  user: userSlice,\n  products: productSlice,\n  [appApi.reducerPath]: appApi.reducer\n});\n\n// Persist config\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  blacklist: [appApi.reducerPath, \"products\"] // Don't persist API cache and products\n};\n\n// Persisted reducer\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\n// Create store\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false // Required for redux-persist\n  }).concat(appApi.middleware) // Add appApi middleware\n});\nexport default store;\n\n/*\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"./services/appApi\";\n\nconst initialState = null;\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    logout: () => initialState,\n    addNotification: (state, action) => {\n      state.notifications.unshift(action.payload);\n    },\n    resetNotifications: (state) => {\n      state.notifications.forEach((obj) => {\n        obj.status = \"read\";\n      });\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addMatcher(\n      appApi.endpoints.signup.matchFulfilled,\n      (_, { payload }) => payload\n    );\n    builder.addMatcher(\n      appApi.endpoints.login.matchFulfilled,\n      (_, { payload }) => payload\n    );\n    // Add other matchers like addToCart, removeFromCart, etc.\n  },\n});\n\nexport const { logout, addNotification, resetNotifications } =\n  userSlice.actions;\nexport default userSlice.reducer;\n\n\n\n\n\n/*\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport productSlice from \"./features/productSlice\";\nimport userSlice from \"./features/userSlice\";\nimport appApi from \"./services/appApi\";\n\n// persist our store\nimport storage from \"redux-persist/lib/storage\";\nimport { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\n\n// reduces\nconst reducer = combineReducers({\n  user: userSlice,\n  products: productSlice,\n  [appApi.reducerPath]: appApi.reducer,\n});\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  blacklist: [appApi.reducerPath, \"products\"],\n};\n\n// persist our store\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\n// create store\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat([appApi.middleware]),\n});\n\nexport default store;\n\n\n\n\n*/","map":{"version":3,"names":["configureStore","productSlice","userSlice","appApi","storage","combineReducers","persistReducer","reducer","user","products","reducerPath","persistConfig","key","blacklist","persistedReducer","store","middleware","getDefaultMiddleware","serializableCheck","concat"],"sources":["/Users/khaledsaidani/Desktop/ecom_Proj/frn_e-com/ecom/src/store.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport productSlice from \"./features/productSlice\";\nimport userSlice from \"./features/userSlice\";\nimport appApi from \"./services/appApi\";\nimport storage from \"redux-persist/lib/storage\";\nimport { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\n\n// Combine reducers\nconst reducer = combineReducers({\n  user: userSlice,\n  products: productSlice,\n  [appApi.reducerPath]: appApi.reducer,\n});\n\n// Persist config\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  blacklist: [appApi.reducerPath, \"products\"], // Don't persist API cache and products\n};\n\n// Persisted reducer\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\n// Create store\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false, // Required for redux-persist\n    }).concat(appApi.middleware), // Add appApi middleware\n});\n\nexport default store;\n\n\n\n\n/*\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"./services/appApi\";\n\nconst initialState = null;\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    logout: () => initialState,\n    addNotification: (state, action) => {\n      state.notifications.unshift(action.payload);\n    },\n    resetNotifications: (state) => {\n      state.notifications.forEach((obj) => {\n        obj.status = \"read\";\n      });\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addMatcher(\n      appApi.endpoints.signup.matchFulfilled,\n      (_, { payload }) => payload\n    );\n    builder.addMatcher(\n      appApi.endpoints.login.matchFulfilled,\n      (_, { payload }) => payload\n    );\n    // Add other matchers like addToCart, removeFromCart, etc.\n  },\n});\n\nexport const { logout, addNotification, resetNotifications } =\n  userSlice.actions;\nexport default userSlice.reducer;\n\n\n\n\n\n/*\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport productSlice from \"./features/productSlice\";\nimport userSlice from \"./features/userSlice\";\nimport appApi from \"./services/appApi\";\n\n// persist our store\nimport storage from \"redux-persist/lib/storage\";\nimport { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\n\n// reduces\nconst reducer = combineReducers({\n  user: userSlice,\n  products: productSlice,\n  [appApi.reducerPath]: appApi.reducer,\n});\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  blacklist: [appApi.reducerPath, \"products\"],\n};\n\n// persist our store\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\n// create store\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat([appApi.middleware]),\n});\n\nexport default store;\n\n\n\n\n*/\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,SAASC,eAAe,QAAQ,OAAO;AACvC,SAASC,cAAc,QAAQ,eAAe;;AAE9C;AACA,MAAMC,OAAO,GAAGF,eAAe,CAAC;EAC9BG,IAAI,EAAEN,SAAS;EACfO,QAAQ,EAAER,YAAY;EACtB,CAACE,MAAM,CAACO,WAAW,GAAGP,MAAM,CAACI;AAC/B,CAAC,CAAC;;AAEF;AACA,MAAMI,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXR,OAAO;EACPS,SAAS,EAAE,CAACV,MAAM,CAACO,WAAW,EAAE,UAAU,CAAC,CAAE;AAC/C,CAAC;;AAED;AACA,MAAMI,gBAAgB,GAAGR,cAAc,CAACK,aAAa,EAAEJ,OAAO,CAAC;;AAE/D;AACA,MAAMQ,KAAK,GAAGf,cAAc,CAAC;EAC3BO,OAAO,EAAEO,gBAAgB;EACzBE,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE,KAAK,CAAE;EAC5B,CAAC,CAAC,CAACC,MAAM,CAAChB,MAAM,CAACa,UAAU,CAAC,CAAE;AAClC,CAAC,CAAC;AAEF,eAAeD,KAAK;;AAKpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}