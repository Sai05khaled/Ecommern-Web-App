{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"./services/appApi\";\nconst initialState = null;\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    logout: () => initialState,\n    addNotification: (state, action) => {\n      state.notifications.unshift(action.payload);\n    },\n    resetNotifications: state => {\n      state.notifications.forEach(obj => {\n        obj.status = \"read\";\n      });\n    }\n  },\n  extraReducers: builder => {\n    builder.addMatcher(appApi.endpoints.signup.matchFulfilled, (_, {\n      payload\n    }) => payload);\n    builder.addMatcher(appApi.endpoints.login.matchFulfilled, (_, {\n      payload\n    }) => payload);\n    // Add other matchers like addToCart, removeFromCart, etc.\n  }\n});\nexport const {\n  logout,\n  addNotification,\n  resetNotifications\n} = userSlice.actions;\nexport default userSlice.reducer;\n\n/*\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport productSlice from \"./features/productSlice\";\nimport userSlice from \"./features/userSlice\";\nimport appApi from \"./services/appApi\";\n\n// persist our store\nimport storage from \"redux-persist/lib/storage\";\nimport { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\n\n// reduces\nconst reducer = combineReducers({\n  user: userSlice,\n  products: productSlice,\n  [appApi.reducerPath]: appApi.reducer,\n});\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  blacklist: [appApi.reducerPath, \"products\"],\n};\n\n// persist our store\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\n// create store\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat([appApi.middleware]),\n});\n\nexport default store;\n\n\n\n\n*/","map":{"version":3,"names":["createSlice","appApi","initialState","userSlice","name","reducers","logout","addNotification","state","action","notifications","unshift","payload","resetNotifications","forEach","obj","status","extraReducers","builder","addMatcher","endpoints","signup","matchFulfilled","_","login","actions","reducer"],"sources":["/Users/khaledsaidani/Desktop/ecom_Proj/frn_e-com/ecom/src/store.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"./services/appApi\";\n\nconst initialState = null;\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    logout: () => initialState,\n    addNotification: (state, action) => {\n      state.notifications.unshift(action.payload);\n    },\n    resetNotifications: (state) => {\n      state.notifications.forEach((obj) => {\n        obj.status = \"read\";\n      });\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addMatcher(\n      appApi.endpoints.signup.matchFulfilled,\n      (_, { payload }) => payload\n    );\n    builder.addMatcher(\n      appApi.endpoints.login.matchFulfilled,\n      (_, { payload }) => payload\n    );\n    // Add other matchers like addToCart, removeFromCart, etc.\n  },\n});\n\nexport const { logout, addNotification, resetNotifications } =\n  userSlice.actions;\nexport default userSlice.reducer;\n\n/*\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport productSlice from \"./features/productSlice\";\nimport userSlice from \"./features/userSlice\";\nimport appApi from \"./services/appApi\";\n\n// persist our store\nimport storage from \"redux-persist/lib/storage\";\nimport { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\n\n// reduces\nconst reducer = combineReducers({\n  user: userSlice,\n  products: productSlice,\n  [appApi.reducerPath]: appApi.reducer,\n});\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  blacklist: [appApi.reducerPath, \"products\"],\n};\n\n// persist our store\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\n// create store\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat([appApi.middleware]),\n});\n\nexport default store;\n\n\n\n\n*/\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,mBAAmB;AAEtC,MAAMC,YAAY,GAAG,IAAI;AAEzB,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;EACnCI,IAAI,EAAE,MAAM;EACZF,YAAY;EACZG,QAAQ,EAAE;IACRC,MAAM,EAAEA,CAAA,KAAMJ,YAAY;IAC1BK,eAAe,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAClCD,KAAK,CAACE,aAAa,CAACC,OAAO,CAACF,MAAM,CAACG,OAAO,CAAC;IAC7C,CAAC;IACDC,kBAAkB,EAAGL,KAAK,IAAK;MAC7BA,KAAK,CAACE,aAAa,CAACI,OAAO,CAAEC,GAAG,IAAK;QACnCA,GAAG,CAACC,MAAM,GAAG,MAAM;MACrB,CAAC,CAAC;IACJ;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,UAAU,CAChBlB,MAAM,CAACmB,SAAS,CAACC,MAAM,CAACC,cAAc,EACtC,CAACC,CAAC,EAAE;MAAEX;IAAQ,CAAC,KAAKA,OACtB,CAAC;IACDM,OAAO,CAACC,UAAU,CAChBlB,MAAM,CAACmB,SAAS,CAACI,KAAK,CAACF,cAAc,EACrC,CAACC,CAAC,EAAE;MAAEX;IAAQ,CAAC,KAAKA,OACtB,CAAC;IACD;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEN,MAAM;EAAEC,eAAe;EAAEM;AAAmB,CAAC,GAC1DV,SAAS,CAACsB,OAAO;AACnB,eAAetB,SAAS,CAACuB,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}