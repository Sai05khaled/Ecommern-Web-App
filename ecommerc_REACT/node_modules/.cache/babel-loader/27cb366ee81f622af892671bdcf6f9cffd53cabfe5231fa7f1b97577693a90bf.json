{"ast":null,"code":"// store.js\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport storage from \"redux-persist/lib/storage\"; // Defaults to localStorage for web\nimport { persistReducer } from \"redux-persist\";\nimport thunk from \"redux-thunk\"; // If you are using async actions\nimport userReducer from \"./userSlice\"; // The slice you defined\n\n// Define persist config\nconst persistConfig = {\n  key: \"root\",\n  // Key in localStorage\n  storage // Storage engine (defaults to localStorage)\n};\n\n// Combine reducers (if you have multiple slices, you can add them here)\nconst rootReducer = combineReducers({\n  user: userReducer\n  // Add more reducers if necessary\n});\n\n// Create a persisted reducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// Set up the store\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: [thunk] // Add thunk middleware if you need it\n});\nexport default store;\n\n/*\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"./services/appApi\";\n\nconst initialState = null;\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    logout: () => initialState,\n    addNotification: (state, action) => {\n      state.notifications.unshift(action.payload);\n    },\n    resetNotifications: (state) => {\n      state.notifications.forEach((obj) => {\n        obj.status = \"read\";\n      });\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addMatcher(\n      appApi.endpoints.signup.matchFulfilled,\n      (_, { payload }) => payload\n    );\n    builder.addMatcher(\n      appApi.endpoints.login.matchFulfilled,\n      (_, { payload }) => payload\n    );\n    // Add other matchers like addToCart, removeFromCart, etc.\n  },\n});\n\nexport const { logout, addNotification, resetNotifications } =\n  userSlice.actions;\nexport default userSlice.reducer;\n\n\n\n\n\n/*\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport productSlice from \"./features/productSlice\";\nimport userSlice from \"./features/userSlice\";\nimport appApi from \"./services/appApi\";\n\n// persist our store\nimport storage from \"redux-persist/lib/storage\";\nimport { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\n\n// reduces\nconst reducer = combineReducers({\n  user: userSlice,\n  products: productSlice,\n  [appApi.reducerPath]: appApi.reducer,\n});\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  blacklist: [appApi.reducerPath, \"products\"],\n};\n\n// persist our store\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\n// create store\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat([appApi.middleware]),\n});\n\nexport default store;\n\n\n\n\n*/","map":{"version":3,"names":["configureStore","combineReducers","storage","persistReducer","thunk","userReducer","persistConfig","key","rootReducer","user","persistedReducer","store","reducer","middleware"],"sources":["/Users/khaledsaidani/Desktop/ecom_Proj/frn_e-com/ecom/src/store.js"],"sourcesContent":["// store.js\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport storage from \"redux-persist/lib/storage\"; // Defaults to localStorage for web\nimport { persistReducer } from \"redux-persist\";\nimport thunk from \"redux-thunk\"; // If you are using async actions\nimport userReducer from \"./userSlice\"; // The slice you defined\n\n// Define persist config\nconst persistConfig = {\n  key: \"root\", // Key in localStorage\n  storage, // Storage engine (defaults to localStorage)\n};\n\n// Combine reducers (if you have multiple slices, you can add them here)\nconst rootReducer = combineReducers({\n  user: userReducer,\n  // Add more reducers if necessary\n});\n\n// Create a persisted reducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// Set up the store\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: [thunk], // Add thunk middleware if you need it\n});\n\nexport default store;\n\n\n\n\n\n\n/*\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"./services/appApi\";\n\nconst initialState = null;\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    logout: () => initialState,\n    addNotification: (state, action) => {\n      state.notifications.unshift(action.payload);\n    },\n    resetNotifications: (state) => {\n      state.notifications.forEach((obj) => {\n        obj.status = \"read\";\n      });\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addMatcher(\n      appApi.endpoints.signup.matchFulfilled,\n      (_, { payload }) => payload\n    );\n    builder.addMatcher(\n      appApi.endpoints.login.matchFulfilled,\n      (_, { payload }) => payload\n    );\n    // Add other matchers like addToCart, removeFromCart, etc.\n  },\n});\n\nexport const { logout, addNotification, resetNotifications } =\n  userSlice.actions;\nexport default userSlice.reducer;\n\n\n\n\n\n/*\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport productSlice from \"./features/productSlice\";\nimport userSlice from \"./features/userSlice\";\nimport appApi from \"./services/appApi\";\n\n// persist our store\nimport storage from \"redux-persist/lib/storage\";\nimport { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\n\n// reduces\nconst reducer = combineReducers({\n  user: userSlice,\n  products: productSlice,\n  [appApi.reducerPath]: appApi.reducer,\n});\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  blacklist: [appApi.reducerPath, \"products\"],\n};\n\n// persist our store\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\n// create store\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat([appApi.middleware]),\n});\n\nexport default store;\n\n\n\n\n*/\n"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,eAAe,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,2BAA2B,CAAC,CAAC;AACjD,SAASC,cAAc,QAAQ,eAAe;AAC9C,OAAOC,KAAK,MAAM,aAAa,CAAC,CAAC;AACjC,OAAOC,WAAW,MAAM,aAAa,CAAC,CAAC;;AAEvC;AACA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EAAE;EACbL,OAAO,CAAE;AACX,CAAC;;AAED;AACA,MAAMM,WAAW,GAAGP,eAAe,CAAC;EAClCQ,IAAI,EAAEJ;EACN;AACF,CAAC,CAAC;;AAEF;AACA,MAAMK,gBAAgB,GAAGP,cAAc,CAACG,aAAa,EAAEE,WAAW,CAAC;;AAEnE;AACA,MAAMG,KAAK,GAAGX,cAAc,CAAC;EAC3BY,OAAO,EAAEF,gBAAgB;EACzBG,UAAU,EAAE,CAACT,KAAK,CAAC,CAAE;AACvB,CAAC,CAAC;AAEF,eAAeO,KAAK;;AAOpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}